* Reading

Reading from multiple resources gives you a multidimensional gestalt of a subject. I favour this approach after having learning through a subject linearly at school and college. I highly recommend going through as
many perspectives as possible until you develop a nuanced understanding about the
subject and can conduct your own reasoning about an arbitrary question about the subject.

Considering the long term, such in depth understanding is what will help you in achieve something in an area where that subject hasn't been applied before. I find such use of the knowledge more substantial rather than using empty $5 computer science words to impress people.
  
** Light and easy
   
*** [[http://imgur.com/a/XBHub][Lambda Calculus for Linguists (2015)]]

[[https://i.imgur.com/hQWGYJZ.png]]
    
*** This one :P
   
** Intermediate

*** Church’s Thesis and Functional Programming
https://www.cs.kent.ac.uk/people/staff/dat/miranda/ctfp.pdf

This is a beautiful paper that maps out the teritorry of Lambda Calculus.

*** A Tutorial Introduction to the Lambda Calculus Raúl Rojas
Download: http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf

*** An Introduction to Functional Programming through Lambda Calculus (1988)
*Author: Gregory Michaelson*
    
*** Computability and Logic (1974)
    
*** An unsolvable problem of elementary number  theory (1936)
*Author: Alonzo Church*

*** A note on the Entscheidungsproblem (1936)
*Author: Alonzo Church*

*** The calculi of lambda conversion (1941)
*Author: Alonzo Church*

*** A formulation of the logic of sense and denotation  (1951)
*Author: Alonzo Church*

*** A theory of the meaning of names (1995)
*Author: Alonzo Church*

*** [[https://web.archive.org/web/*/https://core.ac.uk/download/pdf/82536710.pdf][Why Gödel Didn’t Have Church’s Thesis (1982)]]
*Author: Martin Davis*

** Thorough
  
Chris Hankin's Lambda Calculi: A guide for computer scientists (1994)

*** Lambda-Calculus Combinators and Functional Programming (1988)
G. Revesz

Conditionals and booleans
Representation of numbers using false
Church numeral encoding

*** The Lambda Calculus: Its Syntax and Semantics
Barendregt, H. P. 1981

Representation of numbers using false.
Church numeral encoding

Barendregt, 1994
Download: http://www.nyu.edu/projects/barker/Lambda/barendregt.94.pdf

The Architecture of Symbolic Computers

*** History of Lambda-calculus and Combinatory Logic (2006)
Felice Cardone, J. Roger Hindley
Download: http://www.users.waitrose.com/~hindley/SomePapers_PDFs/2006CarHin,HistlamRp.pdf

** Books touching upon Lambda Calculus

*** Types and Programming Languages
*Author: Benjamin Pierce*

*** Architecture for Symbolic Computers

*** Hindley and Seldin (1987)

*** Recursive Programming Techniques
Burge (1975)

Conditionals and booleans
Church numeral encoding

*** Programming Languages, Information Structures and Machine Organisation
P. Wegner (1971)

Conditionals and booleans
Representation of numbers
Church numeral encoding

*** Field and Harrison (1988)
Conditionals and booleans
Representation of numbers

*** Peyton-Jones (1987)

*** Denotational Semantics: A Methodology for Language Development (1986)
D. A. Schmidt

*** Stoy (1977)
Conditional expressions and booleans as exercises

*** Glaser et al. (1984)
Conditionals and booleans
Representation of numbers using false

*** Henson (1987)
Conditionals and booleans
Church numeral encoding

** Tangential

*** [[https://web.archive.org/web/20190427190611/https://dl.acm.org/ft_gateway.cfm?id=1283933&type=pdf][Can programming be liberated from the von Neumann style? A functional style and its algebra of programs (1978)]]
John Backus

A critique of von Neumann computing and arguments for functional programming

*** Call-by-Name, Call-by-Value, and the Lambda Calculus

*** Peter Norvig's Paradigms of AI: case studies in common lisp

*** The Lambda Papers
https://web.archive.org/web/20180807220913/http://library.readscheme.org:80/page1.html

** YCombinator
https://mvanier.livejournal.com/2897.html

*** The Why of Y
https://web.archive.org/web/20040203164806/http://www.dreamsongs.com/NewFiles/WhyOfY.pdf

** Engineering
http://matt.might.net/articles/compiling-up-to-lambda-calculus/
http://matt.might.net/articles/writing-an-interpreter-substitution-denotational-big-step-small-step/

** History
   
[[./history.org][Presented separately]]
